namespace Trilang.Lexing;

public enum TokenKind
{
    Unsupported,
    EndOfFile,

    Identifier,
    Integer,
    Float,
    String,
    Char,

    // Symbols
    Colon,
    SemiColon,
    Comma,
    OpenParen,
    CloseParen,
    OpenBrace,
    CloseBrace,
    OpenBracket,
    CloseBracket,
    Plus,
    Minus,
    Asterisk,
    Slash,
    Percent,
    Equal,
    Exclamation,
    EqualEqual,
    ExclamationEqual,
    Less,
    LessEqual,
    Greater,
    GreaterEqual,
    Ampersand,
    AmpersandAmpersand,
    Pipe,
    PipePipe,
    Caret,
    Tilde,

    PlusEqual,
    MinusEqual,
    AsteriskEqual,
    SlashEqual,
    PercentEqual,
    AmpersandEqual,
    PipeEqual,
    CaretEqual,

    EqualGreater,
    Dot,
    Hash,

    // Keywords
    Var,
    If,
    Else,
    EndIf,
    Return,
    True,
    False,
    While,
    For,
    Break,
    Continue,
    Public,
    Internal,
    Private,
    Type,
    Constructor,
    New,
    Null,
    Get,
    Set,
    Static,
    Is,
}

public static class TokenKindExtensions
{
    public static string ToDisplayString(this TokenKind kind)
        => kind switch
        {
            TokenKind.Unsupported => "<UnsupportedToken>",
            TokenKind.EndOfFile => "<EOF>",
            TokenKind.Identifier => "<Identifier>",
            TokenKind.Integer => "<Integer>",
            TokenKind.Float => "<Float>",
            TokenKind.String => "<String>",
            TokenKind.Char => "<Char>",
            TokenKind.Colon => ":",
            TokenKind.SemiColon => ";",
            TokenKind.Comma => ",",
            TokenKind.OpenParen => "(",
            TokenKind.CloseParen => ")",
            TokenKind.OpenBrace => "{",
            TokenKind.CloseBrace => "}",
            TokenKind.OpenBracket => "[",
            TokenKind.CloseBracket => "]",
            TokenKind.Plus => "+",
            TokenKind.Minus => "-",
            TokenKind.Asterisk => "&",
            TokenKind.Slash => "/",
            TokenKind.Percent => "%",
            TokenKind.Equal => "=",
            TokenKind.Exclamation => "!",
            TokenKind.EqualEqual => "==",
            TokenKind.ExclamationEqual => "!=",
            TokenKind.Less => "<",
            TokenKind.LessEqual => "<=",
            TokenKind.Greater => ">",
            TokenKind.GreaterEqual => ">=",
            TokenKind.Ampersand => "&",
            TokenKind.AmpersandAmpersand => "&&",
            TokenKind.Pipe => "|",
            TokenKind.PipePipe => "||",
            TokenKind.Caret => "^",
            TokenKind.Tilde => "~",
            TokenKind.PlusEqual => "+=",
            TokenKind.MinusEqual => "-=",
            TokenKind.AsteriskEqual => "*=",
            TokenKind.SlashEqual => "/=",
            TokenKind.PercentEqual => "%=",
            TokenKind.AmpersandEqual => "&=",
            TokenKind.PipeEqual => "|=",
            TokenKind.CaretEqual => "^=",
            TokenKind.EqualGreater => "=>",
            TokenKind.Dot => ".",
            TokenKind.Hash => "#",
            TokenKind.Var => "var",
            TokenKind.If => "if",
            TokenKind.Else => "else",
            TokenKind.EndIf => "endif",
            TokenKind.Return => "return",
            TokenKind.True => "true",
            TokenKind.False => "false",
            TokenKind.While => "while",
            TokenKind.For => "for",
            TokenKind.Break => "break",
            TokenKind.Continue => "continue",
            TokenKind.Public => "public",
            TokenKind.Internal => "internal",
            TokenKind.Private => "private",
            TokenKind.Type => "type",
            TokenKind.Constructor => "constructor",
            TokenKind.New => "new",
            TokenKind.Null => "null",
            TokenKind.Get => "get",
            TokenKind.Set => "set",
            TokenKind.Static => "static",
            TokenKind.Is => "is",
            _ => throw new ArgumentOutOfRangeException(nameof(kind), kind, null),
        };
}